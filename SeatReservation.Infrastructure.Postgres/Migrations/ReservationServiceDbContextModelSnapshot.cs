// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SeatReservation.Infrastructure.Postgres;

#nullable disable

namespace SeatReservation.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(ReservationServiceDbContext))]
    partial class ReservationServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SeatReservation.Domain.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_date")
                        .HasColumnOrder(4);

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("info")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type")
                        .HasColumnOrder(3);

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid")
                        .HasColumnName("venue_id")
                        .HasColumnOrder(1);

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("VenueId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("SeatReservation.Domain.Events.EventDetails", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id")
                        .HasColumnOrder(0);

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasColumnOrder(2);

                    b.HasKey("EventId")
                        .HasName("pk_event_details");

                    b.ToTable("event_details", (string)null);
                });

            modelBuilder.Entity("SeatReservation.Domain.Reservations.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasColumnOrder(4);

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id")
                        .HasColumnOrder(1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasColumnOrder(3);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("SeatReservation.Domain.Reservations.ReservationSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("ReservedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reserve_at")
                        .HasColumnOrder(2);

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uuid")
                        .HasColumnName("seat_id")
                        .HasColumnOrder(1);

                    b.Property<Guid>("reservation_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_reservation_seats");

                    b.HasIndex("SeatId");

                    b.HasIndex("reservation_id");

                    b.ToTable("reservation_seats", (string)null);
                });

            modelBuilder.Entity("SeatReservation.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SeatReservation.Domain.Venues.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<int>("RowNumber")
                        .HasColumnType("integer")
                        .HasColumnName("row_number")
                        .HasColumnOrder(2);

                    b.Property<int>("SeatNumber")
                        .HasColumnType("integer")
                        .HasColumnName("seat_number")
                        .HasColumnOrder(3);

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid")
                        .HasColumnName("venue_id")
                        .HasColumnOrder(1);

                    b.HasKey("Id")
                        .HasName("pk_seats");

                    b.HasIndex("VenueId");

                    b.ToTable("seats", (string)null);
                });

            modelBuilder.Entity("SeatReservation.Domain.Venues.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<int>("SeatsLimit")
                        .HasColumnType("integer")
                        .HasColumnName("seats_limit")
                        .HasColumnOrder(3);

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SeatReservation.Domain.Venues.Venue.Name#VenueName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("name")
                                .HasColumnOrder(2);

                            b1.Property<string>("Prefix")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("prefix")
                                .HasColumnOrder(1);
                        });

                    b.HasKey("Id")
                        .HasName("pk_venues");

                    b.ToTable("venues", (string)null);
                });

            modelBuilder.Entity("SeatReservation.Domain.Events.Event", b =>
                {
                    b.HasOne("SeatReservation.Domain.Venues.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeatReservation.Domain.Events.EventDetails", b =>
                {
                    b.HasOne("SeatReservation.Domain.Events.Event", null)
                        .WithOne("Details")
                        .HasForeignKey("SeatReservation.Domain.Events.EventDetails", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeatReservation.Domain.Reservations.ReservationSeat", b =>
                {
                    b.HasOne("SeatReservation.Domain.Venues.Seat", null)
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeatReservation.Domain.Reservations.Reservation", "Reservation")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("reservation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("SeatReservation.Domain.User", b =>
                {
                    b.OwnsOne("SeatReservation.Domain.Details", "Details", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("description");

                            b1.Property<string>("FIO")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("fio");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.ToJson("details");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsMany("SeatReservation.Domain.SocialNetwork", "Socials", b2 =>
                                {
                                    b2.Property<Guid>("DetailsUserId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Link")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)")
                                        .HasColumnName("link");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)")
                                        .HasColumnName("name");

                                    b2.HasKey("DetailsUserId", "__synthesizedOrdinal");

                                    b2.ToTable("users");

                                    b2.WithOwner()
                                        .HasForeignKey("DetailsUserId");
                                });

                            b1.Navigation("Socials");
                        });

                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("SeatReservation.Domain.Venues.Seat", b =>
                {
                    b.HasOne("SeatReservation.Domain.Venues.Venue", "Venue")
                        .WithMany("Seats")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SeatReservation.Domain.Events.Event", b =>
                {
                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("SeatReservation.Domain.Reservations.Reservation", b =>
                {
                    b.Navigation("ReservedSeats");
                });

            modelBuilder.Entity("SeatReservation.Domain.Venues.Venue", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
